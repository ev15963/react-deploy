1교시

뷰 (view)

기존 테이블들로부터 생성되는 가상의 테이블
테이블 처럼 물리적으로 생성되는 것이 아니라 기존의 테이블들을 조합하여 사용자에게 실제로 존재하는 테이블인 것처럼 보이게함

기능
특정 사용자에게 테이블의 내용 중 일부를 숨길 수 있기 때문에 보안의 효과

복잡한 질의의 결과를 뷰로 만들어서 사용하게 되면 질의를 간단히 표현 할 수 있음

table → ~.db (물리적으로 존재)

view → x (가상으로 존재)

ex) shopping mail (view table)

 view  view
A    B   C   D   E
□ .... . . . . . . . □

vie의 장점 외부침입이 와도 실질적 파일을 못건든다.

복잡한 파일을 쉽게 풀 수 있다.

view테이블을 건드리면 원본 table도 수정된다.

뷰 생성

생성된 뷰는 테이블과 동등하게 사용
형식
create or replace view <뷰이름> as <select문>

or replace 키워드를 추가하면 <뷰이름>과 같은 뷰가 이미 존재하는 경우 기존의 뷰를 지우고 새로 생성

<select문>
뷰 생성에 사용된 select문

create view 이름
	as select

create or replace view 이름  -- 기존 같은 이름 있을 시 덮어 써버림
		as select

테이블 권한 : 커넥트 리소스

SQL> conn system/1234; -- 시스템 계정화면에서
Connected.
SQL> grant create view to 사용자계정;

Grant succeeded.

뷰생성
대부분의 DBMS에서는 사용자 계정에는 뷰 생성 권한이 부여되지 않음
관리자 계정이 아닌 사용자


.////////////////////////////

DDL
DML
DCL

예) takes 테이블에서 grade 필드를 제외한 나머지 필드만으로 구성된 뷰를 생성

(질의 72)
create or replace view v_takes as select stu_id, class_id from takes;


SQL> select stu_id, class_id from takes;

STU_ID               CLASS_ID
-------------------- --------------------
1292001              C101-01
1292001              C103-01
1292001              C301-01
1292002              C102-01
1292002              C103-01
1292002              C502-01
1292003              C103-02
1292003              C501-02
1292301              C102-01
1292303              C102-01
1292303              C103-02
1292303              C501-01

12 rows selected.

view도 테이블 방식


view를 수정하게되면 원본파일도 영향을 미침


예) student 테이블에서 컴퓨터공학과 학생들 레코드만 추출하여 뷰를 생성

(질의 73)
create or replace view cs_student as

select s.stu_id, s.resident_id, s.name, s.year, s.address, s.dept_id
from student s, department d
where s.dept_id = d.dept_id and
	d.dept_name = '컴퓨터공학과'

SQL> select s.stu_id, s.resident_id, s.name, s.year, s.address, s.dept_id
  2  from student s, department d
  3  where s.dept_id = d.dept_id and
  4  d.dept_name = '컴퓨터공학과';

STU_ID               RESIDENT_ID                  NAME		      YEAR ADDRESS              DEPT_ID
-------------------- ---------------------------- --------------------	 ---------- -------------------- --------------------
1292001              900424-1825409               김광식		           3 서울                 920
1292002              900305-1730021               김정현		           3 서울                 920
1292003              891021-2308302               김현정		           4 대전                 920

뷰 사용

뷰에 대해서 insert, update, delete문을 실행
예) v_takes 뷰에 대해 레코드를 삽입

(질의 74)
insert into v_takes
values ('1292502', 'C101-01')

SQL> insert into v_takes
  2  values ('1292502', 'C101-01');

1 row created.

v_takes  뷰에 포함되지 않은 grade 필드는 널이 삽입

takes

stu_id class_id grade   (select * from)
  .         .       . 
  .         .       . 
  .         .       . 
  .         .       . 



SQL> select * from takes;

STU_ID               CLASS_ID             GRADE
-------------------- -------------------- ----------
1292001              C101-01              B+
1292001              C103-01              A+
1292001              C301-01              A
1292002              C102-01              A
1292002              C103-01              B+
1292002              C502-01              C+
1292003              C103-02              B
1292003              C501-02              A+
1292301              C102-01              C+
1292303              C102-01              C
1292303              C103-02              B+
1292303              C501-01              A+
1292502              C101-01

13 rows selected.


v_takes		  (select * from)
std_id class_id 
    .        .
    .        .
    .        .
    .        .
    .        .

SQL> select * from v_takes;

STU_ID               CLASS_ID
-------------------- --------------------
1292001              C101-01
1292001              C103-01
1292001              C301-01
1292002              C102-01
1292002              C103-01
1292002              C502-01
1292003              C103-02
1292003              C501-02
1292301              C102-01
1292303              C102-01
1292303              C103-02
1292303              C501-01
1292502              C101-01

13 rows selected.

뷰 사용

형식

drop view <이름>

SQL> drop view v_takes;

View dropped.

인딜업 못하게 읽기 권한만 설정하여 생성
create or replace view v_takes as select stu_id, class_id from takes with read only;

SQL> create or replace view v_takes as select stu_id, class_id from takes with read only;

View created.

SQL> select stu_id, class_id from takes;

STU_ID               CLASS_ID
-------------------- --------------------
1292001              C101-01
1292001              C103-01
1292001              C301-01
1292002              C102-01
1292002              C103-01
1292002              C502-01
1292003              C103-02
1292003              C501-02
1292301              C102-01
1292303              C102-01
1292303              C103-02
1292303              C501-01
1292502              C101-01

13 rows selected.

DUAL 테이블 (산술 연산 결과를 출력하기 위한 dummy 테이블)

select 24*60 from dual;

SQL> select 24*60 from dual;

     24*60
----------
      1440

select * from dual;

DU
--
X

select SYSDATE from dual;

SYSDATE
--------
20/09/15

복잡한 쿼리를 작성하기 위하면 view 

연산결과 확인 dual(dummy)

절대값을 구하는 ABS
select -10, ABS(-10) from dual;

SQL> select -10, ABS(-10) from dual;

       -10   ABS(-10)
---------- ----------
       -10         10

소수점 아래를 버리는 FLOOR
select 34.5678, FLOOR(34.5678) from dual;

SQL> select 34.5678, FLOOR(34.5678) from dual;

   34.5678 FLOOR(34.5678)
---------- --------------
   34.5678             34

특정 자릿수에 반올림하는 ROUND
select 34.5678, ROUND(34.5678) from dual;

SQL> select 34.5678, ROUND(34.5678) from dual; -- 없으면 졍수까지 반올림

   34.5678 ROUND(34.5678)
---------- --------------
   34.5678             35

소숫점 둘째 자리 수 까지

select 34.5678, ROUND(34.5678, 2) from dual; 

SQL> select 34.5678, ROUND(34.5678, 2) from dual;

   34.5678 ROUND(34.5678,2)
---------- ----------------
   34.5678            34.57

SQL> select 34.5678, ROUND(34.5678, 0) from dual; -- 0번째는 1의자리까지

   34.5678 ROUND(34.5678,0)
---------- ----------------
   34.5678               35


select 34.5678, ROUND(34.5678, -1) from dual;

SQL> select 34.5678, ROUND(34.5678, -1) from dual;

   34.5678 ROUND(34.5678,-1)
---------- -----------------
   34.5678                30

특정 자릿수에서 잘라내는 TRUNC
select TRUNC(34.5678, 2), TRUNC(34.5678, -1), TRUNC(34.5678) from dual;

SQL> select TRUNC(34.5678, 2), TRUNC(34.5678, -1), TRUNC(34.5678) from dual;

TRUNC(34.5678,2) TRUNC(34.5678,-1) TRUNC(34.5678)
---------------- ----------------- --------------
           34.56                30             34

2교시


나머지를 구하는 MOD

select MOD(27, 2), MOD(27, 5), MOD(27, 7) from dual;

SIN : SINE 값을 반환
COS : COSINE 값을 반환
TAN : TANGENT 값을 반환

LOG : LOG 값을 반환
EXP : e(2.71828183...)의 n제곱을 반환

POWER : POWER(m, n) m의 n제곱을 반환 

SIGN : sign(n) n<0 이면 -1이면 n=0 을 n>0 이면 1을 반환
 -> 주가 나타낼때 사용
select sign(2), sign(-27), sign(0) from dual;

SQL> select sign(2), sign(-27), sign(0) from dual;

   SIGN(2)  SIGN(-27)    SIGN(0)
---------- ---------- ----------
         1         -1          0

대소문자 변환 함수
UPPER : 대문자로 변환
LOWER : 소문자로 변환
INITCAP : 첫글자만 대문자로, 나머지 글자는 소문자로 변환

select 'Welcome to Oracle',
	UPPER('Welcome to Oracle'), --필드명
	LOWER('Welcome to Oracle'),
	INITCAP('Welcome to Oracle')
	from dual;

SQL> select 'Welcome to Oracle',
  2  UPPER('Welcome to Oracle'), --필드명
  3  LOWER('Welcome to Oracle'),
  4  INITCAP('Welcome to Oracle') --맨앞 이니셜만 대문자
  5  from dual;

'WELCOMETOORACLE'                  UPPER('WELCOMETOORACLE')	LOWER('WELCOMETOORACLE')           INITCAP('WELCOMETOORACLE')
---------------------------------- ----------------------------------	---------------------------------- ----------------------------------
Welcome to Oracle                  WELCOME TO ORACLE		welcome to oracle                  Welcome To Oracle


문자 길이 구하는 함수

LENGTH : 문자의 길이를 반환 (한글 1byte)
LENGTHB : 문자의 길이를 반환 (한글 3byte)

select 'Welcome to Oracle',
	LENGTH('Welcome to Oracle'), --필드명
	LENGTHB('Welcome to Oracle')
	from dual;

'WELCOMETOORACLE'                  LENGTH('WELCOMETOORACLE')	LENGTHB('WELCOMETOORACLE')
---------------------------------- -------------------------			--------------------------
Welcome to Oracle                                         17			                        17

select LENGTH('Oracle'), LENGTH('오라클') from dual;

SQL> select LENGTH('Oracle'), LENGTH('오라클') from dual;

LENGTH('ORACLE') LENGTH('오라클')
---------------- ----------------
               6                3

select LENGTHB('Oracle'), LENGTHB('오라클') from dual;

SQL> select LENGTHB('Oracle'), LENGTHB('오라클') from dual;

LENGTHB('ORACLE') LENGTHB('오라클')
----------------- -----------------
                6                 9


문자 조작 함수

문자열의 일부만 추출하는 SUBSTR(대상, 시작, 갯수)

aaabbb
select substr('Welcome to Oracle', 2, 3) from dual;

SQL> select substr('Welcome to Oracle', 2, 3) from dual;

SUBSTR
------
elc

select SUBSTR('Welcome to Oracle', 4, 3) from dual;

SQL> select SUBSTR('Welcome to Oracle', 4, 3) from dual;

SUBSTR
------
com

select SUBSTR('Welcome to Oracle', -4, 3) from dual;

SQL> select SUBSTR('Welcome to Oracle', -4, 3) from dual;

SUBSTR
------
acl

SQL> select concat('aaa', 'bbb') from dual;

CONCAT : 문자의 값을 연결

CONCAT('AAA'
------------
aaabbb

SUBSTR

문자단위로 시작위치와 자를 길이를 지정하여 문자열을 자른다.

SUBSTR("문자열", "시작위치", "길이")

바이트 수를 기준으로 문자열의 일부만 추출

SUBSTRB(대상, 시작, 갯수)

select SUBSTR('Welcome  to Oracle', 4, 3), SUBSTRB('Welcome to Oracle', 4, 3) from dual;

SQL> select SUBSTR('Welcome  to Oracle', 4, 3), SUBSTRB('Welcome to Oracle', 4, 3) from dual;

SUBSTR SUBSTR
------ ------
com    com

select SUBSTR('한글테스트', 4, 3), SUBSTRB('한글테스트', 4, 3) from dual; --SUBSTRB는 한글은 3byte

SUBSTR('한글테스트', 4, 3) 	       SUBSTRB('한글테스트', 4, 3)
------------------------------------ ----------------------------------
스트      			       글

특정 문자의 위치 값을 반환하는 INSTR(대상, 찾을 문자, 시작위치, 몇번째 발견)
select INSTR('Welcome to Oracle', 'o') from dual;

SQL> select INSTR('Welcome to Oracle', 'o') from dual;
                               ^
INSTR('WELCOMETOORACLE','O')
----------------------------
                           5

select INSTR('Welcome to oracle', 'o', 6, 2) from dual;
                         123456
SQL> select INSTR('Welcome to oracle', 'o', 6, 2) from dual;
6번째 문자부터 두번째 o 찾기    ^
INSTR('WELCOMETOORACLE','O',6,2)
--------------------------------
                              12

바이트 수를 기준으로 특정 문자의 위치값을 반환하는 INSTR(대상, 찾을 문자, 시작위치
select INSTR('데이터베이스', '이', 4, 1), INSTRB('데이터베이스', '이', 4,1) from dual;
INSTR(대상, 찾을 문자, 시작위치
INSTR('데이터베이스','이',4,1) INSTRB('데이터베이스','이',4,1)
------------------------------ -------------------------------
                             5                               4

특정 기호로 채우는  LPAD, RPAD

select LPAD('Hi', 5, '#') from dual;

SQL> select LPAD('Hi', 5, '#') from dual;

LPAD('HI',
----------
###Hi

select RPAD('Hi', 5, '#') from dual;  Hi 필드명

SQL> select RPAD('Hi', 5, '#') from dual;

RPAD('HI',
----------
Hi###


형변환 함수

문자형으로 변환하는 TO_CHAR

날짜를 문자형으로 TO_CHAR(날짜 데이터, '출력양식')
select sysdate, to_char(sysdate, 'yyyy-mm-dd') from dual;

SQL> select sysdate, to_char(sysdate, 'yyyy-mm-dd') from dual;

SYSDATE  TO_CHAR(SYSDATE,'YYY
-------- --------------------
20/09/15 2020-09-15

select hiredate, to_char(hiredate, 'yyyy-mm-dd day') from emp;

HIREDATE TO_CHAR(HIREDATE,'YYYY-MM-DDDAY')
-------- ----------------------------------------------
07/03/01 2007-03-01 목요일
07/04/02 2007-04-02 월요일
05/02/10 2005-02-10 목요일
03/09/02 2003-09-02 화요일
05/04/07 2005-04-07 목요일
03/10/09 2003-10-09 목요일
04/01/08 2004-01-08 목요일
04/03/08 2004-03-08 월요일
96/10/04 1996-10-04 금요일
05/04/07 2005-04-07 목요일
07/03/01 2007-03-01 목요일

select sysdate, to_char(sysdate, 'yyyy-mm-dd') from dual;
			    yyyy/mm/dd

SQL> select sysdate, to_char(sysdate, 'yyyy-mm-dd') from dual;

SYSDATE  TO_CHAR(SYSDATE,'YYY
-------- --------------------
20/09/15 2020-09-15

3교시


형변환 함수



문자형으로 변환하는 TO_CHAR

날짜를 문자형으로 TO_CHAR(날짜 데이터, '출력양식')

select sysdate, to_char(sysdate, 'yyyy-mm-dd') from dual;

SQL> select sysdate, to_char(sysdate, 'yyyy-mm-dd') from dual;

SYSDATE  TO_CHAR(SYSDATE,'YYY
-------- --------------------
20/09/15 2020-09-15

select hiredate, To_char(hiredate, 'yyyy-mm-dd day') from emp;

SQL> select hiredate, To_char(hiredate, 'yyyy-mm-dd day') from emp;

HIREDATE TO_CHAR(HIREDATE,'YYYY-MM-DDDAY')
-------- ----------------------------------------------
07/03/01 2007-03-01 목요일
07/04/02 2007-04-02 월요일
05/02/10 2005-02-10 목요일
03/09/02 2003-09-02 화요일
05/04/07 2005-04-07 목요일
03/10/09 2003-10-09 목요일
04/01/08 2004-01-08 목요일
04/03/08 2004-03-08 월요일
96/10/04 1996-10-04 금요일
05/04/07 2005-04-07 목요일
07/03/01 2007-03-01 목요일

HIREDATE TO_CHAR(HIREDATE,'YYYY-MM-DDDAY')
-------- ----------------------------------------------
07/08/09 2007-08-09 목요일
02/10/09 2002-10-09 수요일
07/11/09 2007-11-09 금요일

14 rows selected.

select sysdate, to_char(sysdate, 'yyyy-mm-dd, am hh:mi:ss') from dual;

SYSDATE  TO_CHAR(SYSDATE,'YYYY-MM-DD,AMHH:MI:SS')
-------- ------------------------------------------------------
20/09/15 2020-09-15, 오후 12:03:22

날짜형으로 변환하는 To_date('문자', '포맷') (



select ename, hiredate from emp where hiredate=20070402;

ERROR at line 3:

ORA-00932: inconsistent datatypes: expected DATE got NUMBER



select ename, hiredate from emp where hiredate = TO_DATE(20070402, 'YYYYMMDD');

날짜 형식으로 변환해줘야 가능 하다

ENAME                HIREDATE

-------------------- --------

한예슬               07/04/02





select SYSDATE-'2015/01/01' from dual;

ERROR at line 1:

ORA-01722: invalid number



select SYSDATE-TO_DATE('2020/11/17', 'YYYY/MM/DD') FROM DUAL;

SYSDATE-TO_DATE('2015/01/01','YYYY/MM/DD')

------------------------------------------

                                2084.46172

숫자형으로 변환하는 TO_NUMBER



select '20,000'-'10,000' from dual;



select TO_NUMBER('20,000','99,999')-TO_NUMBER('10,000', '99,999') from dual;

99,999 => 숫자 형식을 말한다/



TO_NUMBER('20,000','09,999')-TO_NUMBER('10,000','99,999')

---------------------------------------------------------

                                                    10000



날짜 함수



현재 날짜를 반환하는 SYSDATE

select TO_CHAR(SYSDATE, 'YYYY/MM/DD') from dual;

SQL> select TO_CHAR(SYSDATE, 'YYYY/MM/DD') from dual;

TO_CHAR(SYSDATE,'YYY
--------------------
2020/09/15

select TO_CHAR(SYSDATE-1, 'YYYY/MM/DD') 입사일,
	TO_CHAR(TRUNC(hiredate, 'MONTH'), 'YYYY/MM/DD') 입사일 from emp;

SQL> select TO_CHAR(SYSDATE-1, 'YYYY/MM/DD') 입사일,
  2  TO_CHAR(TRUNC(hiredate, 'MONTH'), 'YYYY/MM/DD') 입사월 from emp;

입사일               입사월
-------------------- --------------------
2020/09/14           2007/03/01
2020/09/14           2007/04/01
2020/09/14           2005/02/01
2020/09/14           2003/09/01
2020/09/14           2005/04/01
2020/09/14           2003/10/01
2020/09/14           2004/01/01
2020/09/14           2004/03/01
2020/09/14           1996/10/01
2020/09/14           2005/04/01
2020/09/14           2007/03/01
2020/09/14           2007/08/01
2020/09/14           2002/10/01
2020/09/14           2007/11/01

14 rows selected.
?????????????????????????????????????

두 날짜 사이의 간격을 구하는 MONTHS_BETWEEN(date1, date2)
select ename, SYSDATE 오늘,
	 TO_CHAR(hiredate, 'YYYY/MM/DD') 입사일,
	TRUNC(MONTHS_BETWEEN(SYSDATE, hiredate)) 근무달수 from emp;

SQL> select ename, SYSDATE 오늘,
  2   TO_CHAR(hiredate, 'YYYY/MM/DD') 입사일,
  3  TRUNC(MONTHS_BETWEEN(SYSDATE, hiredate)) 근무달수 from emp;

ENAME                오늘     입사일                 근무달수
-------------------- -------- -------------------- ----------
김사랑               20/09/15 2007/03/01                  162
한예슬               20/09/15 2007/04/02                  161
오지호               20/09/15 2005/02/10                  187
이병헌               20/09/15 2003/09/02                  204
신동협               20/09/15 2005/04/07                  185
장동건               20/09/15 2003/10/09                  203
이문세               20/09/15 2004/01/08                  200
감우성               20/09/15 2004/03/08                  198
안성기               20/09/15 1996/10/04                  287
이병헌               20/09/15 2005/04/07                  185
조향기               20/09/15 2007/03/01                  162
강혜정               20/09/15 2007/08/09                  157
박중훈               20/09/15 2002/10/09                  215
조인성               20/09/15 2007/11/09                  154

14 rows selected.

개월 수를 더하는 ADD_MONTHS(date, number)
select ename, TO_CHAR(hiredate, 'YYYY/MM/DD') 입사일,
	     TO_CHAR(ADD_MONTHS(hiredate, 6), 'YYYY/MM/DD') "입사 6개월" from emp;

SQL> select ename, TO_CHAR(hiredate, 'YYYY/MM/DD') 입사일,
  2       TO_CHAR(ADD_MONTHS(hiredate, 6), 'YYYY/MM/DD') "입사 6개월" from emp;

ENAME                입사일               입사 6개월
-------------------- -------------------- --------------------
김사랑               2007/03/01           2007/09/01
한예슬               2007/04/02           2007/10/02
오지호               2005/02/10           2005/08/10
이병헌               2003/09/02           2004/03/02
신동협               2005/04/07           2005/10/07
장동건               2003/10/09           2004/04/09
이문세               2004/01/08           2004/07/08
감우성               2004/03/08           2004/09/08
안성기               1996/10/04           1997/04/04
이병헌               2005/04/07           2005/10/07
조향기               2007/03/01           2007/09/01
강혜정               2007/08/09           2008/02/09
박중훈               2002/10/09           2003/04/09
조인성               2007/11/09           2008/05/09

14 rows selected.

해당 달의 마지막 날짜를 반환하는 LAST_DAY(date)
select ename,
	TO_CHAR(hiredate, 'YYYY/MM/DD') 입사일,
	TO_CHAR(LAST_DAY(hiredate), 'YYYY/MM/DD') "마지막 날짜" from emp;

SQL> select ename,
  2  TO_CHAR(hiredate, 'YYYY/MM/DD') 입사일,
  3  TO_CHAR(LAST_DAY(hiredate), 'YYYY/MM/DD') "마지막 날짜" from emp;

ENAME                입사일               마지막 날짜
-------------------- -------------------- --------------------
김사랑               2007/03/01           2007/03/31
한예슬               2007/04/02           2007/04/30
오지호               2005/02/10           2005/02/28
이병헌               2003/09/02           2003/09/30
신동협               2005/04/07           2005/04/30
장동건               2003/10/09           2003/10/31
이문세               2004/01/08           2004/01/31
감우성               2004/03/08           2004/03/31
안성기               1996/10/04           1996/10/31
이병헌               2005/04/07           2005/04/30
조향기               2007/03/01           2007/03/31
강혜정               2007/08/09           2007/08/31
박중훈               2002/10/09           2002/10/31
조인성               2007/11/09           2007/11/30

14 rows selected.

------------------------------------------------------------------------------------------------

NULL을 다른 값으로 반환하는 NVL(expr1, expr2)

수치 데이터를 사용한 NVL(comm, 0)
날짜 데이터를 사용한 NVL(hiredate, TO_DATE('2015/03/10', 'YYYY-MM-DD')
문자 데이터를 사용한 NVL(job, '매니저')

select ename, sal, comm, deptno from emp order by deptno; ??????????

null 값을 0으로 대체하여 연봉 계산
select ename, sal, deptno, NVL(comm, 0), sal*12+NVL(comm, 0) from emp order by deptno;

SQL> select ename, sal, deptno, NVL(comm, 0), sal*12+NVL(comm, 0) from emp order by deptno;

ENAME                       SAL     DEPTNO NVL(COMM,0) SAL*12+NVL(COMM,0)
-------------------- ---------- ---------- ----------- ------------------
이문세                      520         10           0               6240
이병헌                      500         10           0               6000
조인성                      250         10           0               3000
이병헌                      600         20           0               7200
안성기                     1000         20           0              12000
박중훈                      560         20           0               6720
김사랑                      300         20           0               3600
강혜정                      300         20           0               3600
오지호                      500         30         100               6100
한예슬                      250         30          80               3080
감우성                      500         30           0               6000
조향기                      280         30           0               3360
장동건                      480         30           0               5760
신동협                      450         30         200               5600

14 rows selected.

NVL2(expr1, expr2, expr3)

expr1의 결과가 null이 아니면 expr2으로 반환
expr1의 결과가 null이면 exp3으로 반환

select ename, sal, comm, NVL2(comm, sal*12+comm, sal*12) from emp order by deptno;

SQL> select ename, sal, comm, NVL2(comm, sal*12+comm, sal*12) from emp order by deptno;

ENAME                       SAL       COMM NVL2(COMM,SAL*12+COMM,SAL*12)
-------------------- ---------- ---------- -----------------------------
이문세                      520                                     6240
이병헌                      500                                     6000
조인성                      250                                     3000
이병헌                      600                                     7200
안성기                     1000                                    12000
박중훈                      560                                     6720
김사랑                      300                                     3600
강혜정                      300                                     3600
오지호                      500        100                          6100
한예슬                      250         80                          3080
감우성                      500          0                          6000

ENAME                       SAL       COMM NVL2(COMM,SAL*12+COMM,SAL*12)
-------------------- ---------- ---------- -----------------------------
조향기                      280                                     3360
장동건                      480                                     5760
신동협                      450        200                          5600

14 rows selected.

NULLIF(expr1, expr2)
두 표현식을 비교하여 동일한 경우에는 NULL을 반환
두 표현식을 비교하여 동일하지 않을 경우에는 첫 번째 표현식을 반환

select NULLIF('A', 'A'), NULLIF('B', 'B') from dual;

NU NU
-- --

coalesce(expr-1, expr-2, ..... , expr-n)
인수 중에서 NULL이 아닌 첫 번째 인수를 반환
exper-1이 NULL이고 expr-2가 NULL이 아니면 expr-2를 반환

사원테이블에서 커미션이 NULL이 아니면 커미션을 출력,
커미션이 NULL이고, 급여가 NULL이 아니면 급여를 출력
커미션과 급여가 모두 NULL이면 0을 출력

select ename, sal, comm,
	COALESCE(comm, sal, 0) from emp order by deptno;

SQL> select ename, sal, comm,
  2  COALESCE(comm, sal, 0) from emp order by deptno;

ENAME                       SAL       COMM COALESCE(COMM,SAL,0)
-------------------- ---------- ---------- --------------------
이문세                      520                             520
이병헌                      500                             500
조인성                      250                             250
이병헌                      600                             600
안성기                     1000                            1000
박중훈                      560                             560
김사랑                      300                             300
강혜정                      300                             300
오지호                      500        100                  100
한예슬                      250         80                   80
감우성                      500          0                    0
조향기                      280                             280
장동건                      480                             480
신동협                      450        200                  200

14 rows selected.

4교시

선택을 위한 DECODE (일종의 switch case과 같은 기능)

DECODE(표현식, 조건1, 결과1,
		조건2, 결과2,
		조건3, 결과3,
		조건4, 결과4,
		기본결과
	)

부서명 구하기
select ename, deptno,
	DECODE ( deptno, 10, '경리부',
			 20, '인사과',
			 30, '영업부',
			 40, '전산부'
		)
as dname
 from emp;


ENAME                    DEPTNO DNAME
-------------------- ---------- ------------------
김사랑                       20 인사과
한예슬                       30 영업부
오지호                       30 영업부
이병헌                       20 인사과
신동협                       30 영업부
장동건                       30 영업부
이문세                       10 경리부
감우성                       30 영업부
안성기                       20 인사과
이병헌                       10 경리부
조향기                       30 영업부
강혜정                       20 인사과
박중훈                       20 인사과
조인성                       10 경리부

14 rows selected.

* DECODE는 조건이 일치(= 비교연산자)하는 경우에만 적용
CASE는 다양한 비교연산자를 이용하여 조건 제시 가능

select ename, deptno,
	case when deptno=10 then '경리부'
	      when deptno=20 then '인사과'
	      when deptno=30 then '영업부'
	      when deptno=40 then '전산부'
	END AS DNAME -- 이름을 dname으로 선언
from emp;

ENAME                    DEPTNO DNAME
-------------------- ---------- ------------------
김사랑                       20 인사과
한예슬                       30 영업부
오지호                       30 영업부
이병헌                       20 인사과
신동협                       30 영업부
장동건                       30 영업부
이문세                       10 경리부
감우성                       30 영업부
안성기                       20 인사과
이병헌                       10 경리부
조향기                       30 영업부

ENAME                    DEPTNO DNAME
-------------------- ---------- ------------------
강혜정                       20 인사과
박중훈                       20 인사과
조인성                       10 경리부

14 rows selected.

