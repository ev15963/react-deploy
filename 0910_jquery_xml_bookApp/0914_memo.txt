_ : 임의의 한 개 문자를 의마
% : 임의의 여러개 문자를 의미

%서울% : 서울이란 단어가 포함된 문자열
%서울 : 서울이란 단어로 끝나는 문자열
서울% : 서울이란 단어로 시작하는 문자열
'_ _ _ '  : 정확히 세게의 문자로 구별되는 문자열
'_ _ _%' : 최소한 세 개의 문자로 구별되는 문자열

select


LIKE 연산자

student 테이블에서 김씨 성을 가진 학생들을 찾는 질의

질의 34

select *
from student
where name like '김%'

STU_ID               RESIDENT_ID                  NAME		      YEAR ADDRESS              DEPT_ID
-------------------- ---------------------------- --------------------	---------- -------------------- --------------------
1292001              900424-1825409               김광식		         3 서울                 920
1292002              900305-1730021               김정현		         3 서울                 920
1292003              891021-2308302               김현정		         4 대전                 920
1292301              890902-2704012               김현정    	         2 대구                 923
1292305              921011-1809003               김우주     	         4 부산                 923

질의 35

select *
from student
where resident_id like '%-2%'

STU_ID               RESIDENT_ID                  NAME		      YEAR ADDRESS              DEPT_ID
-------------------- ---------------------------- --------------------	 ---------- -------------------- --------------------
1292003              891021-2308302               김현정		          4 대전                     920
1292301              890902-2704012               김현정		          2 대구                     923

집합연산 (했던거)
관계대수의 집합 연산인 합집합, 교집합, 차집합에 해당하는 연산자
union
intersect
minus

형식
<select문 1> <집합연산자> <select문 2>

조건
<select문 1>과 <select문 2>의 필드의 개수와 데이터 타입이 서로 갈아야함

UNION
예) student 테이블의 학생 이름과 professor 테이블의 교수 이름을 합쳐서 출력

질의 36
select name from student
union
select name from professor

NAME
--------------------
고희석
김광식
김우주
김정현
김태석
김현정
박광수
박철수
박철재
백태성
이태규
장민석
최성희

13 rows selected.

UNION ALL
union 연산자는 연산 결과에 중복되는 값이 들어갈 경우 한번만
(((중복을 제거하고 싶지 않다면)))) union 연산자 대신 union all 연산자를 사용
예) student 테이블과 professor 테이블에서 학과번호를 중복을 허용하여 출력

NAME
--------------------
김광식
김정현
김현정 (중복)
김현정 (중복)
박광수
김우주
박철수
백태성
이태규
고희석
최성희
김태석
박철재
장민석

14 rows selected.

INTERSECT

예) 컴퓨터공학과 학생들 중에서 교과목에 상관없이 학점을 'A+' 받은 학생들의 학번을 검색

질의 37

select s.stu_id
from student s, department d, takes t
where s.dept_id = d.dept_id and
t.stu_id = s.stu_id and
dept_name='컴퓨터공학과' and grade='A+'

STU_ID
--------------------
1292001
1292003

발생의 전환 ##################
컴퓨터공학과에 다니는 학생들의 학번과 takes 테이블에서 학점이 A+ 인 학생들의 학번의 교집합

질의 40
select stu_id
from student s, department d
where s.dept_id =d.dept_id and dept_name='컴퓨터공학과'
intersect
select stu_id
from takes
where grade = 'A+'

STU_ID
--------------------
1292001
1292003

MINUS (차집합)
예) 산업공학과 학생들 중에서 한번이라도 'A+'를 받지 못한 학생들의 학번을 검색

질의 41
select stu_id from student s, department d
where s.dept_id = d.dept_id and dept_name='산업공학과'
minus
select stu_id from takes
where grade = 'A+'

STU_ID
--------------------
1292301
1292305

2교시

조인(join)

두 테이블로 부터 특정 조건을 만족하는 레코드들을 하나의 레코드로 결합하는 연산
카티션 프로덕트는 모든 가능한 조합에 의해 레코드들을 생성하지만 조인은 특정 조건은 만족하는 레코드만을 선택

세타(theta: ) 조인이라고도 함

형식 ) <테이블 이름1> ▷◁ 조건식 <테이블 이름2>

<조건식>
조인조건 (join condition) 이라부름
	조인조건은 필드간의 동등비교(=)가 대부분이며 이를 동등조인(equijoin)이하 함
다음과 같이 카티션 프로덕트로 표현가능
<테이블 이름1> ▷◁ 조건식 <테이블이름2> <조건식>(<테이블이름1> ▷◁

자연 조인(natural join)
서로 다른 테이블엣 같은 이름을 갖는 두 필드에 대한 동등 조인 중 하나의 필드를 제거하여 단순히 표현한 연산

형식 ) <테이블이름1> ▷◁ <테이블이름2>

다음이 성립함
R1 ▷◁ R2 

공통되는 필드가 업으면 카디션 프로덕트

외부 조인 (outer join)

자연 조인의 예

name  address	    name  dept_name	      name   address  dept_name
김광식 서울      ▷◁  김광식 컴퓨터공학과	=    김광식  서울      컴퓨터공학과
김현정 대전	    김현정 산업공학과	      김현정  대전	   산업공학과
조영수 대전	    이진영 전자공학과	     (공통으로 존재하는 김광식, 김현정을 출력)

조영수와 이진영은 서로 일치되는 레코드가 없어 검색 결과에서 배제됨

외부 조인

조인 조건에 만족되지 않은 레코드까지 검색 결과에 포함시키기 위한 방법
서로 매치되지 앟


freshmen =▷◁   member 
연산 결과

name  address dept_name
김광식 서울     컴퓨터공학과
김현정 대전     산업공학과
조영수 대전     NULL


freshmen   ▷◁= member


freshmen =▷◁= member


예) 모든 교과목글에 대하 교과목명, 학점수, 개설 년도, 개설 학기를 검색
질의 42

select title, credit, year, semester
from course, class
where course.course_id = class.couse_id

select title, course_id
from course

TITLE                                    COURSE_ID
---------------------------------------- --------------------
전산개론                                 C101
자료구조                                 C102
데이터베이스                             C103
운영체제                                 C301
컴퓨터구조                               C302
이산수학                                 C303
객체지향언어                             C304
인공지능                                 C501
알고리즘                                 C502

select course_id
from class

COURSE_ID
--------------------
C101
C102
C103
C103
C501
C501
C301
C302
C502
C502
//////////////////////////join한거 확인하기


왼쪽 외부조인 (Left outer join)
연산자의 왼쪽의 위치한 테이블의 각 레코드에 대해서 오른쪽 테이블에 조인조건에 부합하는 레코드가 없을 경우에도 검색결과에 포함
생성되는 결과 레코드에서 오른쪽 테이블의 나머지 필드에는 널이 삽입

질의 43 표현방식 i ///////////////////////////////////////////////

select title, credit, year, semester
from course left outer join class
using (course_id)

TITLE                                        CREDIT       YEAR   SEMESTER
---------------------------------------- ---------- ---------- ----------
전산개론                                          3       2012          1
자료구조                                          3       2012          1
데이터베이스                                     4       2012          1
데이터베이스                                     4       2012          1
인공지능                                          3       2012          1
인공지능                                          3       2012          1
운영체제                                          3       2012          2
컴퓨터구조                                       3       2012          2
알고리즘                                          2       2012          2
알고리즘                                          2       2012          2
객체지향언어                                     4
이산수학                                          4

course left outer join class
course 테이블과 class 테이블에 대해 왼쪽 외부 조인을 적용

using(couse_id)
조인 조건이 course.course_id = class.course_id라는 것을 의미

질의 44 표현방식 ii
select title, credit, year, semester
from course, class
where course.course_id = class.course_id (+)

TITLE                                        CREDIT       YEAR   SEMESTER
---------------------------------------- ---------- ---------- ----------
전산개론                                          3       2012          1
자료구조                                          3       2012          1
데이터베이스                                     4       2012          1
데이터베이스                                     4       2012          1
인공지능                                          3       2012          1
인공지능                                          3       2012          1
운영체제                                          3       2012          2
컴퓨터구조                                       3       2012          2
알고리즘                                          2       2012          2
알고리즘                                          2       2012          2
객체지향언어                                     4
이산수학                                          4

질의 45 표현방식 i //////////////////////

select title, credit, year, semester
from course right outer join class
using (course_id)

TITLE                                        CREDIT       YEAR   SEMESTER
---------------------------------------- ---------- ---------- ----------
전산개론                                          3       2012          1
자료구조                                          3       2012          1
데이터베이스                                     4       2012          1
데이터베이스                                     4       2012          1
운영체제                                          3       2012          2
컴퓨터구조                                       3       2012          2
인공지능                                          3       2012          1
인공지능                                          3       2012          1
알고리즘                                          2       2012          2
알고리즘                                          2       2012          2

10 rows selected.

질의 46 표현방식 ii	////////////////////
select title, credit, year, semester
from course, class
where class.course_id (+) = course.course_id

TITLE                                        CREDIT       YEAR   SEMESTER
---------------------------------------- ---------- ---------- ----------
전산개론                                          3       2012          1
자료구조                                          3       2012          1
데이터베이스                                     4       2012          1
데이터베이스                                     4       2012          1
인공지능                                          3       2012          1
인공지능                                          3       2012          1
운영체제                                          3       2012          2
컴퓨터구조                                       3       2012          2
알고리즘                                          2       2012          2
알고리즘                                          2       2012          2
객체지향언어                                     4
이산수학                                          4

완전 외부조인 (full outer join)
양쪽 테이블에서 서로 일치하는 레코드가 없을 경우, 
해당 레코드들도 결과 테이블에 포함시키며 나머지 필드에 대해서는 모두 널을 삽입

(질의 47)

select title credit, year, semester
from course full outer join class
using (course_id)

CREDIT                                         YEAR   SEMESTER
---------------------------------------- ---------- ----------
전산개론                                       2012          1
자료구조                                       2012          1
데이터베이스                                  2012          1
데이터베이스                                  2012          1
인공지능                                       2012          1
인공지능                                       2012          1
운영체제                                       2012          2
컴퓨터구조                                    2012          2
알고리즘                                       2012          2
알고리즘                                       2012          2
객체지향언어
이산수학

12 rows selected.

집계 함수 (aggregate function)
통계연산 기능 제공
예)
컴퓨터공학과 학생들은 모두 몇 명인가?
교수들의 평균 재직연수는 몇 년인가?
종류
count : 데이터의 개수를 구한다.
sum : 데이터의 합을 구한다.
avg : 데티어의 평균 값을 구한다.
max : 데이터의 최대 값을 구한다.
min : 데이터의 최소 값을 구한다.

select 절과 having절(뒤에 설명)에서만 가능
sum ,avg는 숫자형 데이터 타입을 갖는 필드에만 적용 가능
-> 일반 where절에서는 사용 불가능

Count
형식
count(distinct<필드이름>)
해달 필드에 값으 몇개인지 출력
distinct : 서로 구별된은 값의 개수가 필요한 경우에만 적용
NULL은 계산되서 제외됨
단, <필드이름>에는 필드 이름 대신 '*'가 사용된 경우에는 레코드의 개수를 계산

예) student 테이블에서 3학년 학생이 몇 명인지 출력

(질의 48)
select count(*)
from student
where year=3

  COUNT(*)
----------
         5

예) student 테이블에서 dept_id 필드에 값이 몇 개인 지를 출력
(질의 49) ////////////////////////

select count(distinct dept_id)
from student


COUNT(DISTINCTDEPT_ID)
----------------------
                     3


count
예) 컴퓨터공학과의 학생 수를 출력

(질의 50) //////////////////

select count(*)
from student s, department d
where s.dept_id = d.dept_id and d.dept_name = '컴퓨터공학과'

  COUNT(*)
----------
         3

3교시

sum
형식
sum(<필드이름>)
예) 전체 교수들의 재직연수 합

(질의 51)
select sum(2012 - year_emp)
from professor

SUM(2012-YEAR_EMP)
------------------
                56

emp 필드이름 설명
       EMPNO 사원번호
       ENAME 사원이름
       JOB      업무
       MGR    


sum

emp 테이블에 저장됨 모든 직원들의 급여 합을 출력

(질의 52)

select sum(sal)
from emp

업무(job 필드)가 'analyst'인 직원들의 급여의 합을 출력

(질의 53)

select sum(sal)
from emp
where job = '전산부'

부서 이름이 RESEARCH인 직원들의 급여의 합을 출력

(질의 54)
select sum (sal)
from emp e, dept d
where e.deptno = d.deptno and dname= '영업부'

  SUM(SAL)
----------
      2460

avg

형식

avg(<필드이름>)

예) 전체 교수의 평균 재직연수를 출력

(질의55)

select avg(2012 - year_emp)
from professor

AVG(2012-YEAR_EMP)
------------------
        9.33333333

MIN, MAX

형식
max(<필드 이름>)
min(<필드 이름>)

예) 부서 이름이 'accounting' 인 직원들 중에서 최대 급여가 얼마인지 출력

(질의 56)
select max(sal)
from emp e, dept d
where e.deptno = d.deptno and dname = '인사부'

  MAX(SAL)
----------
      1000

(질의 44)
select ename, max(sal)
from emp

예) 부서 이름이 'accouting; 인 직원들 중에서 최대 급여가 얼마인지 출력

(질의 56)
select max(sal)
from emp e, dept d
where e.deptno = d.deptno and dname = '인사부'

  MAX(SAL)
----------
      1000

집계함수(maxinum 등..)랑 필드명은 같이사용 못한다.

group by

//////////////////////

형식

group by <필드리스트>

group bu 절은 select문에서 where 절 다음에 위치
group by 에 지정된 필드의 값이 같은 레코드들끼리 그룹을 지어 각 그룹별로 집계 함수를 적용한 결과를 출력

예) student 테이블에서 학과번호(dept_id 필드) 별로 레코드의 개수를 출력

(질의 57)

select dept_id, count(*)
from student
group by dept_id

cf) 집계함수는 필드명과 같이 사용 못하지만

group by에서 지정한 필드명은 select절에서 사용가능 집계함수

DEPT_ID                COUNT(*)
-------------------- ----------
925                           2
920                           3
923                           3

예) 학과번호 대신 department  테이블과 조인하여 학과 이름이 출력되도록 (질의 57)을 수정

(질의 58)

select dept_name, count(*)
from student s, department d
where s.dept_id = d.dept_id
group by dept_name

DEPT_NAME                                  COUNT(*)
---------------------------------------- ----------
컴퓨터공학과                                      3
산업공학과                                        3
전자공학과                                        2

예) emp, dept 테이블에서 부서별 직원수, 평균급여, 최대급여, 최소급여를 출력

(질의 59)
select dname, count(*), avg(sal), max(sal), min(sal)
from emp e, dept d
where e.deptno = d.deptno
group by dname

DNAME                          COUNT(*)   AVG(SAL)   MAX(SAL)   MIN(SAL)
---------------------------- ---------- ---------- ---------- ----------
경리부                                3   423.333333        520        250
영업부                                6        410        500        250
인사부                                5        552       1000        300

예) 학사 데이터 베이스에서 학과별 교수 숫자와 평균 재직연수, 최대 재직연수를 출력

(질의 60)

select dept_name, count(*), avg(2012 - year_emp), max(2012 - year_emp)
from professor p, department d
where p.dept_id  = d.dept_id
group by dept_name

DEPT_NAME                                  COUNT(*) AVG(2012-YEAR_EMP)	MAX(2012-YEAR_EMP)
---------------------------------------- ---------- ------------------		------------------
컴퓨터공학과                                      2                 12	   	                15
산업공학과                                        2                 10		                13
전자공학과                                        2                  6		                 7

select
from


select
from
where

select
from
group by

select
from
where
group

having

그룹에 대한 조건을 명시할 때 사용
예) 평균 재직연수가 10년 이상인 학과에 대해서만 교수 숫자와 평균 재직연수, 최대 재직연수를 출력

다음은 오류
Group에 대한 조건은 where절에 사용하지 못함 
HAVING절을 이용해야함

(질의 61)
select dept_name.count(*), avg(2012-year-emp), max(2012 - year_emp)
from professor p, department d
where p.dept_id = d.dept_id and avg(2012 - year_emp) >= 10
group by dept_name 

ERROR at line 1:
ORA-00936: missing expression  // 누락된 표현식


형식
having <집계함수 조건>

예) having  절을 이용하여 다시 작성
(질의 62) ????????????
select dept_name.count(*), avg(2012-year-emp), max(2012 - year_emp) //결과값을 출력하기 위한 함수
from professor p, department d
where p.dept_id = d.dept_id
group by dept_name
having avg(2012 - year_emp) >= 10 //조건을 검색하기 위한 함수 (중복코드 x)

예) 직원 숫자가 5명 이상인 부서에 대해서 부서별 직원수, 평균급여, 최대급여, 최소급여를 출력

(질의 63)
select dname, count(*), avg(sal), max(sal), min(sal)
from emp e, dept d
where e.deptno = d.deptno
group by dname
having count(*) >= 5

DNAME                          COUNT(*)   AVG(SAL)   MAX(SAL)   MIN(SAL)
---------------------------- ---------- ---------- ---------- ----------
영업부                                6        410        500        250
인사부                                5        552       1000        300

where절과 having절, group by절을 모두 함꼐 사용할 경우
where절에  명시된 조건을 만족하는 레코드들을 검색
group by절에 명시된 필드의 값이  서로 일치하는 레코드들 끼리 그룹을 지어 집계 함수를 적용
마지막으로 그 집계 함수를 적용한 결과들 중에서 having 절을 만족하는 결과만 골라서 출력

4교시

널(null)의 처리

널을 검색하는 방법
형식
<필드이름 > is null
<필드이름 > is not null

예) takes 테이블에서 아직 학점이 부여되지 않은 학생의 학번을 검색

(질의 64)
select stu_id
from takes
where grade is null

no rows selected

널의 처리

예) takes 테이블에서 학점이  'A+'가 아닌 학생들의 학번을 검색

(질의 65)
select stu_id
from takes
where grade<>'A+'

grade  필드의 값이 널의 레코드에 대해서는 질의 결과에 포함되지 않음
하지만 count(*)는 특정 필드가 아닌 레코드 전체에 대한 연산이므로 널의 존재 여부와는 무관함

중첩 질의 (nested query)
SQL문을 다른 SQL문 안에 중첩하여 사용하는 질의
복잡한 질의를 쉽게 표현할 수 있는 수단을 제공
내부질의(inner query), 부질의(subquery)
내부에 포함된 SQL문
외부질의 (outer query)
부 질의를 내부적으로 갖는 SQL문

부 질의는 외부 질의의  from 절이나 where 절에 위치

종류

in, not in

=some, <=some, <some, >some, >=some, <>some (some 대신 any를 사용해도됨)
=all, <=all, <all, >all >=all, <>all
exists, not exists

중첩 질의 종류 (in, some, all, exists, no exists)

select
from
where "   " in (select
	      from
	      where)

in(포함=select query) not in

=some, <=some, <some, >some, >=some, <>some
(some 대신 any를 사용해도됨)
=some : 지정된 필드의 값이 부 질의 검색 결과에 존재하는 임의의 값과 같은지를 나타낼 때 사용
	in과 같은 의미

=all, <=all, <all, >all, >=all, <>all
=all : 지정된 필드으 값이 부 질의 검색 결과에 포함된 모든 값과 같은지를 판단

exists : 최소한 한 개의 레코드가 존재하면 참이되고 그렇지 않으면 거짓
no exists : 부 질의의 결과에 레코드가 하나도 없으면 참이 되고 하나라도 존재하면 거짓


in, not in

예) 301호 강의실에서 개설된 강좌의 과목명을 출력

(질의 66)
select title
from course
where course_id in
		(select distinct course_id
		from class
		where classroom ='301호')

부 질의
키워드 in 뒤에 나오는 SQL문으로서 class 테이블에서 강의실이 '301호'인 교과목 번호를 검색

외부 질의
course 테이블에서 course_id 필드의 값이 부 질의의 검색 결과에 포함되는 경우(in)에만 과목명 출력

비교 단계
1) in 괄호안 검증
SQL> select distinct course_id
  2  from class
  3  where classroom ='301호';

COURSE_ID
--------------------
C101
C301
C103

2) select from 까지 검증
SQL> select title
  2  from course;

TITLE
----------------------------------------
전산개론
자료구조
데이터베이스
운영체제
컴퓨터구조
이산수학
객체지향언어
인공지능
알고리즘

SQL> select title
  2  from course
  3  where course_id in
  4  (select distinct course_id
  5  from class
  6  where classroom ='301호');

TITLE
----------------------------------------
전산개론
데이터베이스
운영체제

IN, NOT IN
동일한 표현
(질의 67) 
select distinct title
from course c1, class c2
where c1.course_id = c2.course_id and
classroom = '301호'

TITLE
----------------------------------------
데이터베이스
전산개론
운영체제


예) 2012년 2학기에 개설되지 않은 과목명을 검색
(질의 68)/////////////////
select title
from course
where course_id not in
		(select distinct course_id
		from class
		where year = 2012 and semester =2)

1)
SQL> select distinct course_id
  2  from class
  3  where year = 2012 and semester =2;

COURSE_ID
--------------------
C301
C302
C502

2)
SQL> select title
  2  from course;

TITLE
----------------------------------------
전산개론
자료구조
데이터베이스
운영체제
컴퓨터구조
이산수학
객체지향언어
인공지능
알고리즘

9 rows selected.

3)
SQL> select title
  2  from course
  3  where course_id not in
  4  (select distinct course_id
  5  from class
  6  where year = 2012 and semester =2);

TITLE
----------------------------------------
자료구조
객체지향언어
데이터베이스
전산개론
인공지능
이산수학

6 rows selected.

some, all

=some
지정된 필드의 값이 부 질의 검색 결과에 존재하는 임의의 값과 같은지를 나타낼 때 사용
in과 같은 의미

<=some
부 질의의 검색 결과에 존재하는 임의의 값보다 작거나 같은질르 나타낼 때 사용

=all
지정된 필드 값이 부 질의 검색 결과에 포함된 모든 값과 같은지를 판단

<=all
지정된 필드의 값이 부 질의 검색 결과에 포함된 모든 값보다 작거나 같은 지를 판단

예 가장 많은 수강인원을 가진 강좌를 선택
(질의 69)
select c1.course_id, title, year, semester, prof_id
from class c1, course c2
where c1.course_id = c2.course_id and enroll >= all
					(select enroll from class)

SQL> select enroll from class;

    ENROLL
----------
        40
        30
        30
        30
        45
        25
        30
        45
        30
        26

10 rows selected.

SQL> select c1.course_id, title, year, semester, prof_id
  2  from class c1, course c2;

COURSE_ID            TITLE                                          YEAR	  SEMESTER PROF_ID
-------------------- ---------------------------------------- ----------	   ---------- --------------------
C101                 전산개론                                       2012		              1 92301
C102                 전산개론                                       2012		              1 92001
C103                 전산개론                                       2012		              1 92501
C103                 전산개론                                       2012		              1 92301
C501                 전산개론                                       2012			  1 92501
C501                 전산개론                                       2012		              1 92502
C301                 전산개론                                       2012		              2 92502
C302                 전산개론                                       2012		              2 92501
C502                 전산개론                                       2012		              2 92001
C502                 전산개론                                       2012		              2 92301
C101                 자료구조                                       2012		              1 92301
C102                 자료구조                                       2012		              1 92001
C103                 자료구조                                       2012		              1 92501
C103                 자료구조                                       2012		              1 92301
C501                 자료구조                                       2012		              1 92501
C501                 자료구조                                       2012		              1 92502
C301                 자료구조                                       2012		              2 92502
C302                 자료구조                                       2012		              2 92501
C502                 자료구조                                       2012		              2 92001
C502                 자료구조                                       2012		              2 92301
C101                 데이터베이스                                  2012 		              1 92301
C102                 데이터베이스                                   2012		              1 92001
C103                 데이터베이스                                   2012		              1 92501
C103                 데이터베이스                                   2012		              1 92301
C501                 데이터베이스                                   2012		              1 92501
C501                 데이터베이스                                   2012		              1 92502
C301                 데이터베이스                                   2012		              2 92502
C302                 데이터베이스                                   2012		              2 92501
C502                 데이터베이스                                   2012		              2 92001
C502                 데이터베이스                                   2012		              2 92301
C101                 운영체제                                       2012		              1 92301
C102                 운영체제                                       2012		              1 92001
C103                 운영체제                                       2012		              1 92501
C103                 운영체제                                       2012		              1 92301
C501                 운영체제                                       2012		              1 92501
C501                 운영체제                                       2012		              1 92502
C301                 운영체제                                       2012		              2 92502
C302                 운영체제                                       2012		              2 92501
C502                 운영체제                                       2012		              2 92001
C502                 운영체제                                       2012		              2 92301
C101                 컴퓨터구조                                     2012		              1 92301
C102                 컴퓨터구조                                     2012		              1 92001
C103                 컴퓨터구조                                     2012		              1 92501
C103                 컴퓨터구조                                     2012		              1 92301
C501                 컴퓨터구조                                     2012		              1 92501
C501                 컴퓨터구조                                     2012		              1 92502
C301                 컴퓨터구조                                     2012		              2 92502
C302                 컴퓨터구조                                     2012		              2 92501
C502                 컴퓨터구조                                     2012		              2 92001
C502                 컴퓨터구조                                     2012		              2 92301
C101                 이산수학                                       2012		              1 92301
C102                 이산수학                                       2012		              1 92001
C103                 이산수학                                       2012		              1 92501
C103                 이산수학                                       2012		              1 92301
C501                 이산수학                                       2012		              1 92501
C501                 이산수학                                       2012		              1 92502
C301                 이산수학                                       2012		              2 92502
C302                 이산수학                                       2012		              2 92501
C502                 이산수학                                       2012		              2 92001
C502                 이산수학                                       2012		              2 92301
C101                 객체지향언어                                   2012		              1 92301
C102                 객체지향언어                                   2012		              1 92001
C103                 객체지향언어                                   2012		              1 92501
C103                 객체지향언어                                   2012		              1 92301
C501                 객체지향언어                                   2012		              1 92501
C501                 객체지향언어                                   2012		              1 92502
C301                 객체지향언어                                   2012		              2 92502
C302                 객체지향언어                                   2012		              2 92501
C502                 객체지향언어                                   2012		              2 92001
C502                 객체지향언어                                   2012		              2 92301
C101                 인공지능                                       2012		              1 92301
C102                 인공지능                                       2012		              1 92001
C103                 인공지능                                       2012		              1 92501
C103                 인공지능                                       2012		              1 92301
C501                 인공지능                                       2012		              1 92501
C501                 인공지능                                       2012		              1 92502
C301                 인공지능                                       2012		              2 92502
C302                 인공지능                                       2012		              2 92501
C502                 인공지능                                       2012		              2 92001
C502                 인공지능                                       2012		              2 92301
C101                 알고리즘                                       2012		              1 92301
C102                 알고리즘                                       2012		              1 92001
C103                 알고리즘                                       2012		              1 92501
C103                 알고리즘                                       2012		              1 92301
C501                 알고리즘                                       2012		              1 92501
C501                 알고리즘                                       2012		              1 92502
C301                 알고리즘                                       2012		              2 92502
C302                 알고리즘                                       2012		              2 92501
C502                 알고리즘                                       2012		              2 92001
C502                 알고리즘                                       2012		              2 92301

90 rows selected.

exists not exist
부 질의 검색 결과에 최소한 하나 이상의 레코드가 존재하는지의 여부를 표현

예) '301호' 강의실에서 개설된 강좌의 과목명을 출력

select title
from course
where exists
		(select *
		from class
		where classroom = '301호' and
		        course.course_id = class.course_id)

검증 1
SQL> select title
  2  from course;

TITLE
----------------------------------------
전산개론
자료구조
데이터베이스
운영체제
컴퓨터구조
이산수학
객체지향언어
인공지능
알고리즘

9 rows selected.

검증 2
SQL> select *
  2  from class, course
  3  where classroom = '301호' and
  4          course.course_id = class.course_id;

CLASS_ID             COURSE_ID           	   YEAR   SEMESTER DI	PROF_ID              CLASSROOM      ENROLL COURSE_ID		TITLE                                        CREDIT
-------------------- -------------------- ----------     ---------- --	-------------------- ------------------ ---------- --------------------	---------------------------------------- ----------
C101-01              C101                       2012                1 A	92301                301호                      40  C101		전산개론                                       	     3
C103-02              C103                       2012                1 B	92301                301호                      30  C103		데이터베이스                                      4
C301-01              C301                       2012                2 A	92502                301호                      30  C301		운영체제                                          3


검증 3
SQL> select title
  2  from course
  3  where exists
  4  (select *
  5  from class
  6  where classroom = '301호' and
  7          course.course_id = class.course_id);

TITLE
----------------------------------------
전산개론
데이터베이스
운영체제

동일표현

select title
from course
where not exists
		(select course_id
		from class
		where year = 2012 and
			semester = 2 and
			course.course_id =class.course_id)

ORA-00918: column ambiguously defined(ORA-00918: 모호하게 정의된 열)

1)
SQL> select class.course_id
  2  from class, course
  3  where year = 2012 and
  4  semester = 2 and
  5  course.course_id =class.course_id;

COURSE_ID
--------------------
C301
C302
C502
C502

2)
SQL> select title
  2  from course;

TITLE
----------------------------------------
전산개론
자료구조
데이터베이스
운영체제
컴퓨터구조
이산수학
객체지향언어
인공지능
알고리즘

9 rows selected.


3)
SQL> select title
  2  from course
  3  where not exists
  4  (select course_id
  5  from class
  6  where year = 2012 and
  7  semester = 2 and
  8  course.course_id =class.course_id);

TITLE
----------------------------------------
자료구조
객체지향언어
데이터베이스
전산개론
인공지능
이산수학

6 rows selected.

내일 view index 조작함수들