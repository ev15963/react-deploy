1교시


// 데이터 조건 검색 트랜잭션 실행
function selectBook4(name) {

// 데이터 수정 트랜잭션 실행
function updateBook() {

// 데이터 수정 위한 데이터 검색 트랜잭션 실행
function selectBook2(name)

작성

2교시

// 데이터 수정 트랜잭션 실행
function updateBook() {

sqlite 사용시 트랜젝션 사용

var updateSQL = 'update book set type = ?, name =?, where name =?';

preparedstatement와 비슷한 기능

[type, new_name, old_name], : 와일드 카드에 순서대로 들어감


selectmenu ??

rs : resultset

function(tr, rs) {
if(rs.rows.length>0) { //한건이라도 찾았다.
	$('#bookType2').val(rs.rows.item(0).type).attr('selected', 'selected');
	$('#bookType2').selectmenu('refresh');
	$('#bookName2').val(rs.rows.item(0).name);
} else {
	alert('검색된 도서가 없습니다.');
	
// 데이터 조건 검색 트랜잭션 실행
function selectBook4(name) {
전체조회 검색하는 거

나에서 tu es vonita에게:  (비공개로) 10:41 AM
확인해서 오류는 없앴는데 도서 내용은 입력이 돼지 않습니다..
tu es vonita에서 나에게:  (비공개로) 10:42 AM
어제 추가까지 되지 않았나요?

나에서 tu es vonita에게:  (비공개로) 10:44 AM
어제 입력하는 창(보이는창)까지 됐었어요
tu es vonita에서 나에게:  (비공개로) 10:46 AM
어제 도서명 입력하면 테이블에 삽입.. 전체검색까지 완료했는데... 미완성이었나요?
보내드린 파일.. 내부 코드를 비교 해보세요.. 보내드린 파일을 그냥 실행하면 안됩니다..~~!!!
나에서 tu es vonita에게:  (비공개로) 10:46 AM
코드는 따라쳤는데 db조회는 안됐어요
네네 확인해볼께요

bookApp.html
dbHandle.js

수정중...


3교시

11:12
// 데이터 삭제 트랜잭션 실행
function deleteBook() {

}

tu es vonita님이 모두에게:  11:17 AM
다음 함수로 이동 합니다~~ 미완성이신 분???

//삭제 화면의 검색 버튼
$('#search3').click( function() {

//삭제 화면의 삭젠 버튼
$('#submit3').click (function() {
		
//삭제 화면의 취소 버튼
$('#cancel3').click (function() {

tu es vonita님이 모두에게:  11:27 AM
잘 실행되시죠??


미션) 목록 조회 해보기

오후에는 oracle 

tu es vonita님이 모두에게:  11:41 AM
오후에 오라클 실습합니다.. 설치 안되신 분들은 설치 완료하세요~~

// 추가 화면의 추가 버튼
$('#submit1').click( function() {
 : 도서내용 입력시 필요 12:21

// 추가화면의 취소 버튼
$('#cancel1').click(function() {


4교시 

전체조회 추가해보기..
12:54


5교시 

오라클

릴레이션 개념

속성 필드. 컬럼
튜플 레코드 행

도메인
각 필드에 입력가능한 값들의 범위
더이상 불리되지 않는 값이여야한다.

널
특정값이 정해지지 않거나 없거나

0, " "과 null은 다름

cf) NaN : not a Number

릴레이션개념(5)
null 값의 정의되지 않음
배열형태

R(A1, A2, …, An)
R : 릴레이션
A : 어트리튜브

차수 = 1 : 	단항 테이블(unary relation)
차수 = 2 : 	이항 테이블(binary relation)
차수 = n : 	n 항 테이블(n-ary relation)

테이블 인스턴스 table instance
데이터를 레코드(행)으로 저장하는 형태

카디널리티 레코드의 수

중복된 레코드가 존재하지 않음
테이벌 인서턴스는 레코드들의 집합

키(key)
레코드간 데이터간 순서가 의미없으므로 레코드를 구분하기위해선 각 레코드 값을 이용
필드 일부 지정 각 레코드들을 유일하기 식별해낼 수 있는 식별자
여러개의 필드로 키를 구성가능

관계형 데이터 모델에서 특정 레코드를 구별하거나 탐색하기 위한 유일한 방법

되도록 하나의 필드로 구성된 후보키를 선정하는 것이 유리함

외래키

R1의 각 레코드의 FK값은 R2 의 레코드 중 하나의 PK값과 일치하거나 널이 됨

C:\web_work\0910_jquery_xml_bookApp

DDL & DML
데이터 정의 언어
create 테이블 생성 drop 테이블 삭제 alter 테이블 수정
데이터 조작 언어


표준SQL ANSI SQL

기본키 외래키 설정



테이블 생성(student table)

not null과 기본키를 저장한 studnet 테이블 생성 예

SQL> create table department (
  2  dept_id    varchar2(10)    not null,
  3  dept_name  varchar2(14)    not null,
  4  office     varchar2(10)
  5  );

(질의2)
create table department (
dept_id varchar2(10),
dept_name varchar2(20) not null,
office varchar2(20),
constraint pk_department primary key(dept_id)
)

(질의3)
create table student (
stu_id varchar2(10),
resident_id varchar2(14) not null,
name varchar2(10) not null,
year int,
address varchar2(10),
dept_id varchar2(10),
constraint pk_student primary key(stu_id),
constraint fk_student foreign key(dept_id) references department(dept_id)
);

프라이머리키를 잡아주고 그에대한 뭐시기를 붙여줘야한다.
참조하는 키는 외래키를 붙여야한다.

professor 테이블
질의 5
create table professor (
prof_id varchar2(10),
resident_id varchar2(14) not null,
name varchar2(10) not null,
dept_id varchar2(10),
position varchar2(10),
year_emp int,
constraint pk_professor primary key(prof_id),
constraint fk_professor foreign key(dept_id) references department(dept_id)
);

ORA-00955: name is already used by an existing object
기존의 객체가 이름을 사용하고 있습니다

질의6 
create table course(
course_id varchar2(10),
title varchar(14) not null,
credit int,
constraint pk_course primary key(course_id)
);

(질의7)
create table class(
class_id varchar2(10),
course_id varchar2(10),
year int,
semester int,
division char(1),
prof_id varchar2(10),
classroom varchar(9),
enroll int,
constraint pk_class primary key(class_id),
constraint fk_class1 foreign key(course_id) references course(course_id),
constraint fk_class2 foreign key(prof_id) references professor(prof_id)
);


(질의8)

create table takes(
stu_id varchar2(10),
class_id varchar2(10),
grade char(5),
constraint pk_takes primary key(stu_id, class_id),
constraint fk_takes1 foreign key(stu_id) references student(stu_id),
constraint fk_takes2 foreign key(class_id) references class(class_id)
);

다른테이블에서 외래키로 참조되는 경우는 절대 삭제X

참조대상을 먼저 지우고 삭제해야한다.

오류코드 ORA-02449

없는 테이블을 추가 add<추가할 필드>

질의 9

alter table student
add age int;

SQL> desc student
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 STU_ID                                    NOT NULL VARCHAR2(10)
 RESIDENT_ID                               NOT NULL VARCHAR2(14)
 NAME                                      NOT NULL VARCHAR2(10)
 YEAR                                               NUMBER(38)
 ADDRESS                                            VARCHAR2(10)
 DEPT_ID                                            VARCHAR2(10)
 AGE                                                NUMBER(38)

ORA-00904: : invalid identifier 부적합한 식별자

필드 삭제 형식
alter table<테이블 이름> drop column<삭제할 필드>

질의 10

alter table student
drop column age;

SQL> desc student
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 STU_ID                                    NOT NULL VARCHAR2(10)
 RESIDENT_ID                               NOT NULL VARCHAR2(14)
 NAME                                      NOT NULL VARCHAR2(10)
 YEAR                                               NUMBER(38)
 ADDRESS                                            VARCHAR2(10)
 DEPT_ID                                            VARCHAR2(10)

7교시

기본키 외래키 관련

외래키를 필드로 갖는 테이블을 생성 할 때

(질의 12)
insert into department (office, dept_id, dept_name)
values ('201호', '920', 컴퓨터공학과');

(질의 13)
insert into department (dept_id, dept_name)
values ("920", "컴퓨터공학과");

ALTER TABLE department MODIFY dept_name  VARCHAR2(20);

ORA-01400: cannot insert NULL into ("FREEFLUX"."DEPARTMENT"."DEPT_ID")

(질의 14)
insert into department values ('923', '산업공학과', '207호')

(질의16)
update student
set year = year+1

(질의 17)
update professor
set position='교수', dept_id='923'
where name='고희석'

(질의 19)
insert into student
values ('1292002', '900305-1730021', '김정현', 3, '서울', '120)
ORA-01756: quoted string not properly terminated
따옴표 짝맞춰서 써라

ORA-00001: unique constraint (FREEFLUX.PK_STUDENT) violated
무결성 제약조건 위배

dept_id='921'

delete from department where dept_id='920';

ORA-02449: unique/primary keys in table referenced by foreign keys
무결성 제약조건

(질의 20)
select name, dept_name
from department student
where department.dept_id = student.dept_id

파티션 프로덕트 : 비교할 테이블을 하나씩 대조


8교시

(질의 22)
select distinct address from student;

ADDRESS
--------------------
서울

(질의 24)
select name, 2012-year_emp from professor;

(질의 25)
select student.name, student,stu_id, department,dept_name
from stdent, department
where student.dept_id = department,dept_id

(질의 26)
select student.stu_id
from student, department
where student.dept_id = department.dept_id and
	student.year = 3 and
	department.dept_name='컴퓨터공학과';

no rows selected

(질의27)
select name, stu_id
from student
where year = 3 or year = 4
order by name, stu_id;

NAME                 STU_ID
-------------------- --------------------
김정현               1292002

select name, dept_id
from student
where year = 3 or year = 4
order by name, stu_id;

tu es vonita님이 모두에게:  05:16 PM
SQL> select name, dept_id
  2  from student
  3  where year = 3 or year = 4
  4  order by dept_id, name, stu_id;

NAME                         DEPT_ID
---------------------------- --------------------
김광식                       920
김정현                       920
김현정                       923
박광수                       923
박철수                       925
백태성                       925

6 rows selected.

(질의 28)
select name, stu_id
from student
where year = 3 or year = 4
order by name desc, stu_id;

NAME                 STU_ID
-------------------- --------------------
김정현               1292002

(질의 30)

select name, position, 2012-year_emp from professor;

no rows selected

(질의 33)

select name 이름, position 직위, 2012-year_emp 재직연수 --재정의
from professor

no rows selected

tu es vonita님이 모두에게:  05:16 PM
SQL> select name, dept_id
  2  from student
  3  where year = 3 or year = 4
  4  order by dept_id, name, stu_id;


tu es vonita님이 모두에게:  05:20 PM
NAME                         DEPT_ID
---------------------------- --------------------
박철수                       925
백태성                       925
김현정                       923
박광수                       923
김광식                       920
김정현                       920


(질의 35)

select * from student
where resident_id like '%~2%'


no rows selected

2. 관계형 ppt
집합연산 
union 합집합
minus 차집합
intersect

형식
<select문> <집합연산자> <select문 2>

UNION
std테이블의 학생 이름과 profeesor 테이블의 교수이름을 합쳐 출력

select name from student union select name from professor

NAME
--------------------
김정현


union 연산자는 연산결과에 중복되는 값이 들어갈 경우 한번만 중복 제거하고 싶지 않다면 union 연산자 대신 union all 연산자를 사용


intersect 

(질의 37)
select s.stu_id 
from student s, department d, take t
where s.dept_id=d.dept_id and
t.stu_id=s.stu_id and
dept_name='컴퓨터공학과' and grade ='A+'

(질의 40)
select stu_id
from student s, department d
where s.dept_id=d.dept_id and dept_name='컴퓨터공학과'
intersect
select stu_id
from takes
where grade='A+'


질의41

select stu_id from student s, department d
where s.dept_id - d.dept_id and dept_name='산업공학과'
minus
select stu_id from takes
where grade = 'A+'


tu es vonita님이 모두에게:  05:45 PM
STU_ID
--------------------
1292003
진혁 김님이 모두에게:  05:45 PM
넵
tu es vonita님이 모두에게:  05:45 PM
SQL> select s.stu_id
  2  from student s, department d, takes t
  3  where s.dept_id = d.dept_id and
  4  t.stu_id = s.stu_id and
  5  dept_name='컴퓨터공학과' and grade = 'A+';



STU_ID
--------------------
1292003

SQL> select stu_id
  2  from student s, department d
  3  where s.dept_id = d.dept_id and dept_name='컴퓨터공학과'
  4  intersect
  5  select stu_id
  6  from takes
  7  where grade = 'A+';

STU_ID
--------------------
1292003




데이터 정의 언어 (DDL)

constraint 제약식이름 primary key(필드명);

                       ↓

constraint pk_테이블명 primary key(필드명);


기본키 (primary key)

 : constraint pk_테이블명 primary key(필드명);


외래키 (foreign key)

 : constraint fk_테이블명 foreign key(필드명) 
   references 참조되는 테이블명(필드명);
   
   
1. 참조되는 테이블(department) (반드시 프라이머리키 하나 잡혀야 한다)
2. 참조하는 테이블(student)

두개이상 외래키일 경우 이름 다르게 1,2 설정

1.  테이블에 새로운 필드 추가하기
alter table student  add      age      int
alter table 테이블명 add 추가할필드명 데이터타입(크기);

확인 :  desc 테이블명;

2.  테이블의 기존 필드를 삭제하기
alter table 테이블명 drop column 삭제할필드명;
alter table  student drop column age;


데이터 정의 언어 (DDL)

insert into 테이블명 (필드) values (값);

칼럼 크기 변경하기

alter table department modify dept_name varchar2(20);

insert into department (dept_id, dept_name ) values ('920', '캄퓨터공학과');

레코드 수정

update 테이블명 set 수정할 내용, 수정할 내용,.. where 조건;

select * from student; 출력

stutdent 테이블 내 학년을 하나식 증가하기

update student set year = year+1; (학년)

professer 테이블에서 

고희석 교수 직위(position)를 부교수에서 교수로,
 
학과번호(dept_id)를 920에서 923으로

update professor set position='교수', dept_id='923' where name='고희석';

레코드 삭제

delete from 테이블명 where 조건;

where절에 있는 조건을 삭제
cf) where절 생략시, 테이블 모든 레코드를 삭제

professor 테이블에서 이름(name)이 '김태석'인 교수님 삭제
delete from professor where name ='김태석';

외래키로 참조하는 필드를 갖고 있는 레코드를 삭제할 시 오류 발생
ORA-02449: unique/primary keys in table referenced by foreign keys

레코드 검색 join, group by, having

검색레코드 종류

카티션 프로덕트
: 두개의 테이블에서 각각의 레코드들을 서로 결합해서, 하나의 레코드로 구성하면서,
모든 가능한 조합의 레코드들로 테이블을 만드는 연산

예1)
student 테이블과 department 테이블

select name, dept_name
from department, student
where department.dept_id = student.dept_id;

컴퓨터공학과 3학년 학생들의 학번
select student.stu_id
from student, department
where student.dept_id = department.dept_id
and department.dept_name ='컴퓨터공학과' and student.year =3;

중복된 레코드를 제거하고 검색 -  distinct


student 테이블에서 모든 학생들의 주소 (address)를 추출하면,

SQL> select address from student;

ADDRESS
------------------------------
서울
서울
대전
대구
광주
부산
대전
서울

8 rows selected.

중복 제거시 : distinct

select distinct address from student;

SQL> select distinct address from student;

ADDRESS
-------------------
서울
부산
대전
광주
대구

select 할때 산술식이나 상수를  통해 select하기

select 절에는 필드명과 산술식 또는 상수를 사용할 수 도 있다.

professor 테이블에서, 교수의 이름(name)현재까지의 재직연수를 select 

select name, 200-year-emp from professor;

SQL> select name, 2020-year_emp from professor;

NAME				2020-YEAR_EMP
------------------	--------------
이태규							23
고희석							17
최성희							15
박철재							13
장민석							15

2020-year_emp이라는 산술식도 가능

professor 테이블의 year_emp 필드

SQL> select year-ep from professor;

 YEAR_EMP
---------
	1997
	2003
	2005
	2007
	2005
	
2020 - 'year_emp'의 각 레코드 값 = '2020-year_emp'


레코드의 순서 지정 order by

검색(select) 결과를 정렬해서 출력하는 기능

select문의 제일 마지막 order by절을 추가해서 정렬 검색

order by + 필드리스트

기본값은 오른차순(asc)
필드리스트 부분에 여러개의 필드를 나열해서 검색하는 경우, 나열된 순서대로 정렬

student 테이블에서 3,4 학년(year) 학생들의 이름(name), 학번(stu_id)을 검색 (오름차순)

select name, stu_id from student where year=3 or year=4 order by name, stu_id;


select name, stu_id
from student
where year=3 or year=4
order by name, stu_id;

like 연산

where 필드명 like 문자열 패턴

like : 문자열이 일부분만 일치하는 경우
= : 정확히 일치할 때만 사용

문자열 패턴 종류
_: 임의의 한개 문자를 의미 (문자갯수 확인)
% : 임의의 여러개 문자를 의미 (문자열 검색)

%서울% : 서울이란 단어가 포함된 문자열
%서울 : 서울이란 단어로 끝나는 문자열
서울% : 서울이란 단어로 시작하는 문자열에
___ : 정확히 세개의 문자로 구성된 문자열
___%  : 최소한 세개의 문자로 구성된 문자열

intersect (교차하다 / 교집합)

1) intersect 안썼을 때
select s.stu_id
from student s, department d, takes t
where s.dept_id = d.dept_id and
t.stu_id = s.stu_id and
dept_name='컴퓨터공학과' and grade='A+';

2) intersect 썼을 때
select stu_id
from student s, department d
where s.dept_id = d.dept_id and dept_name='컴퓨터공학과'
intersect
select stu_id
from takes
where grade='A+';

minus (차집합)
산업공학과 학생들 중에서 한 번이라도 'A+'를 받지 못한 학생들의 학번을 검색
select stu_id -- 산업공학과 학생들 중에서 한 번
from student s, department d
where s.dept_id = d.dept_id and dept_name='산업공학과'
minus -- 'A+'를 받지 못한 학생들
select stu_id from takes
where grade='A+';

join (조인)
두 테이블에서 특정 조건을 만족시키는 레코드들을 하나의 레코드로 결합하는 연산

카티션 프로덕트 - 모든 가능한 조합에 의해 레코드들을 생성

조인 - 특정 조건을 만족하는 레코드만을 선택

조건식 -> 조인 조건(join condition)
: 필드간의 동등 비교(=)가 대부분, 동등조인(equijoin)이라고 한다.

카디션 프로덕트로 표현

테이블이름1 ><조건식 테이블이름2 = σ 조건식(테이블이름1 x 테이블이름2)

natural join (자연 조인)

테이블 이름 1 테이블 이름2

union이랑 거의 비슷

서로 다른 테이블에서 같은 이름을 갖는 두 필드에 대한 동등 조인 중 
하나의 필드를 제거해서 단순히 표현하는 연산

공통되는 필드가 없으면 카티션프로덕트와 같음.

outer join (외부 조인)

조인 조건에 만족되지 않는 레코드 까지 검색결과에 포함시키기 위한 방법

서로 매치되지 않는 필드에 대해서 null을 입력

외부 조인의 종류

1) left outer join (왼쪽 외부조인)  =><

2) right outer join (오른쪽 외부조인)  ><=

3) full outer join (완전 외부조인)  =><=

모든 교과목들에 대해 교과목명, 학점수, 개설년도, 개설학기를 검색

select title, credit, year, semester from course, class where course, course_id = class.course_id;

select title, course_id from course;

select course_id from class;

left join (외부조인)

select title, credit, year, semester from course left outer join class using (course_id);

course left outer join class
: course 테이블과 class 테이블에 대해서 왼쪽 외부조인을 적용

using(cource_id)
: 조인 조건이 'course.course_id = class.course_id" 라는 것을 의미

left outer join 대신에 쓸 수 있는 표현

select title, credit, year, semester from course, class where course.course_id =class.course_id (+);

right join (외부조인)

select title, credit, year, semester from course right outer join class using (course_id);

select title, credit, year, semester from course, class where course.course_id(+) =class.course_id;

full outer join (외부조인)

양쪽 테이블에서 서로 일치하는 레코드가 없는경우 해등 레코드들도 결과 테이블에 포함시키며 나머지 피르드에 대해선 모두 NULL을 삽입

select title. credit, year, semester from course full outer join class using (course_id);

집계함수 (aggregate function)
=통계함수 통계연산 기능을 제공

select 절 having 절에서만 사용가능 (일반 where절에서는 사용불가능)
sum, avg는 숫자형 데이터 타입을 갖는 필드에만 적용가능

종류
-count : 데이터의 갯수를 구함
-sum : 데이터의 합을 구함
-avg  : 데이터의 평균값을 구함
-max : 데이터의 최대값을 구함
-min : 데이터의 최솟값을 구함

count (distinct 필드명)

해당 필드에 값이 몇 개인지를 출력

distinct 키워드 => 서로 구별되는 값의 개수가 필요한 경우에만 사용

NULL은 계산에서 제외

cf) 필드이름 부분에서 필드 이름 대신 * 가 사용되는 경우, 총 레코드의 갯수를 계산

필드이름에 필드명을 사용하면 해당 필드의 갯수를 계산

select count(*) from student where year=3;

또한 아래와 같이 count(필드명)을 쓸 수있지만 NULL 값은 계산에서 빠짐

select count(dept_id) from student;

또한 count함수 내부에 중복제거 키워드인 distinct를 넣을 수 있다.

count(dept_id) 대신 count(distinct dept_id)를 사용하면 아래와 같다.

select count(distinct dept_id) from student;

이번에는 컴퓨터 공학과의 학생수를 출력

select count(*) from student s, department d where s.dept_id=d.dept_id and d.dept_name ='컴퓨터공학과';


sum
sum(필드이름)

전체 교수들의 재직연수의 합을 구해보자
select sum(2020 - year_emp) from professor;

emp 테이블에 저장된 모든 직원들의 급여 합을 출력해보자
select sum(sal) from emp;

업무(job필드)가 '전산부'인 직원들의 급여의 합을 출력해보자
select sum(sal) from emp where job='전산부';

부서 이름이 '영업부'인 직원들의 급여 합을 출력
select sum(sal) from emp e, dept d where e.deptno = d.deptno and dname='영업부';

avg

avg(필드이름) : 전체 교수의 평균 재직 연수를 출력

select avg(2020 - year_emp) from professor;

min, max
max(필드명)
min(필드명)

부서이름이 '인사부'인 직원들 중에서 최대 급여가 얼마인지를 출력

최대급여
select max(sal) from emp e, dept d where e.deptno = d deptno and dname='인사부';

최소급여
select min(sal) from emp e, dept d where e.deptno = d.deptno and dname='인사부';

최대 연봉
select max(sal * 12) from emp e, dept d where e.deptno = d.deptno and dname='인사부';

cf) select ename, max(sal) frop emp;
집계함수와 필드명은 같이 사용 못한다.


group by
group by 필드리스트
: 그룹별로 집계함수를 적용 가능

위치 select ~ where ~ group by

group by에 지정됨 필드 값이 같은 레코드들끼리 그룹을 지어서 각 그룹별로 깁계함수를 적용한 결과를 출력

ex) '학과별 학생 수', '부서별 최대 급여'..

student 테이블에서 학과변호(dept_id 필드) 별로 레코드의 개수를 출력

select dept_id, count(*) from student group by dept_id;

cf) group by ~ 에 지정한 필드명은 집계함수와 같이 사용이 가능하다.

학과번호(dept_id 필드) 대신 department 테이블(dept_name)과 조인하여 학과 이름이 출력되도록 수정

select dept_name, count(*) from student s, department d where s.dept_id  = d.dept_id group by dept_name;

emp, dept 테이블에서 부서별 직원수, 평균급여, 최대급여, 최소급여를 출력

select dname, count(*), avg(sal), max(sal), min(sal) from emp e, dept d where e.detmp = d.deptno group by dname;

학사 데이터베이스에서 학과별 교수 숫자와 평균 재직연수, 최대 재직연수 출력

select dept_name, count(*), avg(2020-year_emp), max(2020_year_emp) from professor p, department d where p.dept_id = d.dept_id group by dept_name;

8. Having
having 집계함수조건

그룹에 대한 조건을 명시할 때 사용

group에 대한 조건은 where 절에 사용하지 못하며, having 절을 이용

평균 재직연수가 10년 이상인학과에 대해서만 교수 숫자, 평균 재직연수, 최대 재직연수를 출력

select dept_name, count(*), avg(2020-year_emp).max(2020-year_emp)
from professer p, department d 
where p.dept_id = d.dept_id and avg(2020-year_emp) >= 10 
group by dept_name;

ORA-00934: group function is not allowed here

그룹 함수는 허가되지 않습니다

코드블럭에서 avg(2020-year-emp) >= 10
having 필요

select dept_name, count(*), avg(2020-year_emp), max(2020_year_emp) 
from professor p, department d 
where p.dept_id = d.dept_id 
group by dept_name having avg(2020-year_emp) >=10;

having : 그룹에 대한 조건 추가하기 위해서 (group by 절 포함)

직원 숫자가 5명 이상인 부서에 대해서 부서별 직원수, 평균급여, 최대 급여 , 최소급여를 출력
select dname, count(*), avg(sal), max(sal), min(sal)
from emp e, dept d
where e.deptno = d.deptno
group by dname
having count(*) >= 5;


* where절, having절, group by절이 모두 함께 사용되는 경우 실행 순서
1.  where 절에 명시된 조건을 만족하는 레코드들을 검색.

2.  group by 절에 명시된 필드의 값이 서로 일치하는 레코드들끼리 그룹을 지어 집계 함수를 적용.

3.  마지막으로 그 집계 함수를 적용한 결과들 중에서 having절을 만족하는 결과만 골라서 출력.

( 전체적인 순서  :  from -> where -> group by -> having -> select )

널(null)의 처리

필드이름 is null;
: null인 값들을 찾기

필드이름 is not null;
:null이 아닌 값들을 찾기

takes 테이블에서 학점이 부여되지 않은 학생의 학번을 검색

select stu_id from takes where grade is null;

만약 takes 테이블에서 학점이 A+가닌 학생들의 학번을 검색한다면?

select stu_id from takes where grade <> 'A+';

grade 필드의 값이 null인 레코드에 대해서는 질의 결과에 포함되지 않는다.
하지만 count(*)는 특정 필드가 아닌 레코드 전체에 대한 연산이므로 null의 존재 여부와는 무관
(not과 비슷)

nested query (중첩 질의)

sql문을 다른 sql문 안에 중첩하여 사용한 질의
복잡한 질의를 쉽게 표현할 수 있는 수단을 제공

내부질의(inner query), 부질의(subquery)
: 내부에 포함된 sql문
(쿼리문 안의 쿼리문)

외부질의(outer query)
: 부 질의를 내부적으로 갖는 SQL문 (쿼리문 밖의 쿼리문)

부 질의는 외부 질의의 from 절이나 where절의 위치

select
from
where ____ in (
				select
				from
				where
				)
				
중첩 질의 종류
in (포함) => 괄호 안에 select 쿼리문이 들어감
not in

=some, <=some, <some, >some, >=some, <>some
some 대신 any 사용가능
=some : 지정된 필드의 값이 부 질의 검색 결과에 존재하는 임의의 값과 같은지를 나타낼때 사용

=all, <=all, <all, >all, >=all, <>all
=all : 지정된 필드의 값이 부 질의 검색 결과에 포함된 모든 값과 같은지를 판단

exists : 최소한 한 개의 레코드가 존재하면 참, 그렇지 않으면 거짓
not exists : 부 질의의 결과에 레코드가 하도 없으면 참/하나라도 존재하면 거짓


IN NOT IN
'301호' 강의실에서 개설된 강좌의 과목명을 출력

select title
from course
where course_id in
					(select distinct course_id
					from class
					where classroom = '301호');
					
부 질의
: 키워드 in 뒤에 나오는 SQL문으로써 class 테이블에서 강의실이 '301호'인 교과목 번호를 검색

외부 질의
: course 테이블에서 course_id 필드 값이 부 질의의 검색 결과에 포함되는 경우(in)에만 과목명 출력

확인방법
: 내부질의 먼저 실행 후 외부질의 실행

내부) select distinct course_id from class where classroom = '301호';

외부) select title, course_id from course;

다른방법

in 대신 조건 (where절)에 and를 사용

select c1.title, c2.course_id
from course c1, class c2
where c1.course_id= c2.course_id and classroom = '301호';

select distinct title
from course c1, class c2
where c1.course_id = c2.course_id and
classroom = '301호';

조건에 and를 사용해도 결과는 같다

not in

2012년 2학기에 개설되지 않은 과목명을 검색 distinct : 중복제거

select title 
from course
where course_id not in
						(select distinct course_id
						from class
						where year = 2012 and semester = 2);
						
some all
=some
지정된 필드의 값이 부 질의 검색 결과에 존재하는 임의의 값과 같은지를 나타낼 때 사용
in과 같은의미

<=some
부질의의 검색 결과에 존재하는 임의 값보다 작거나 같은지를 나타낼 때 사용

=all
지정된 필드의 값이 부 질의 검색 결과에 포함된 모든 값과 같은지

<=all
지정된 필드의 값이 부 질의 검색 결과에 포함된 모든 값보다 작거나 같은지..

(some은 그중 일부랑 같아도 되고 all 모두 같아야한다는 차이)

가장 많은 수강 인원 가진 강좌 검색

1. all
select c1.course_id, title, year, semester, prof_id
from class c1, course c2
where c1.course_id=c2.course_id and enroll >=all
(select enroll from class);

2. some
select c1.course_id title, year, semester, prof_id
from class c1, course c2
where cl.course_id =c2.course_id and enroll >=some
(select enroll from class);


exists, not exists

부질의 검색 결과에 최소한 하나 이상의 레코드가 존재하는 지 여부를 표현

exists: 최소한 한개의 레코드가 존재하면 참이되고, 그렇지 않으면 거짓
not exists : 부 질의의 결과에 레코드가 하나도 없으면 참이되고, 하나라도 존재하면 거짓

'301호' 강의실에서 개설된 강좌의 과목명을 출력

select title
from course
where exists
			(select * 
			from class where classroom = '301호' and
				course.course_id = class.course_id);
				
select title
from course
where not exists
				(select * from class
				where year =2012 and semester = 2 and
					course.course_id = class.course_id);
					
===
select title
from course
where course_id not in
				(select distinct course_id
				from class
				where year = 2012 and semester=2);