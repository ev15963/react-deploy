       NUM AUTHOR							TITLE									CONTENT										WRITEDAY    READCNT
---------- ------------------------------	---------------------------------------	---------------------------------------		-------- ----------
         1 GD.Hong							spring ex1								spring test content1						20/09/16          0
         2 SL.Kim							spring ex2								spring test content2						20/09/16          0
         3 YS.Han							spring ex3								spring test content3						20/09/16          0
         4 JH.Oh							spring ex4								spring test content4						20/09/16          0
         5 BH.Lee							spring ex5								spring test content5						20/09/16          0
         6 DH.Shin							spring ex6								spring test content6						20/09/16          0
         7 DG.Jang							spring ex7								spring test content7						20/09/16          0
         8 MS.Lee							spring ex8								spring test content8						20/09/16          0
         9 WS.Kam							spring ex9								spring test content9						20/09/16          0
        10 SG.Ahn							spring ex10								spring test content10						20/09/16          0

9 rows selected.

ERROR:
ORA-01756: quoted string not properly terminated
따옴표, 쉼표 등 미부착

스프링 게시판(초간단) 설계

구조		파일 생성 및 역할
src 		BoardDAO JNDI명을 이용하여 DB접속 및 list() 메서드 정의
		ListActionController : list() 호출

META-INF  	Context.xml : DB정보를 태그형태로 설정
WEB-INF	   	lib : spring 라이브러리 복사
		web.xml : Dispatcher Servlet 컨트롤러 등록
		board-servlet.xml : 요청 명령어 등록
WebContent	화면에 출력할 pages (~.html / ~.jsp)
page 생성	list에 있는 내용을 Web에 뿌림

Java Resources
패키지	    		파일							역할
board.command		BoardCommand.java				사용자로부터 순수 입력 받는 값만 처리해주는 Class.
									WriteActionController와 UpdateActionController에서 사용.
board.controller		ListActionController.java				Controller 구현 받음
									handleRequest() 메서드 내에서 DAO의 list() 결과 값을 list.jsp 에게 ArrayList 전달
			WriteActionController.java				AbstractCommandController를 상속 받음
									handle() 메서드 내에서 입력받은 값을 DAO의 write()로 저장하고 list.jsp를 호출
			RetrieveActionController.java	Controller 구현 받음
									전달된 num을 이용하요 DAO의 retrieve()를 통해 해당 레코드만 DTO객체에 담아 retrieve.jsp를 호출
			UpdateActionController.java				AbstractCommandController를 상속 받음
									전달된 수장 값들을 DAO의 update()로 수정하고 list.jsp를 호출
			DeleteActionController.java				Controller 구현 받음. 전달된 num을 이용하여 DAO의 delete()로 삭제하고 list.jsp를 호출
			SearchActionController.java				Controller 구현 받음. 전달된 num을 이용하여 DAO의 search()를 수행
									그 결과 값을 ArrayList 객체에 담아 list.jsp에게 전달
													
board.dao		BoardDAO.java					각 쿼리를 실제로 수행하는 class.
									생성자를 통해 Context로부터 DB 접속.
									조회, 검색, 수정, 삭제 등의 쿼리를 수행하고 결과를 반환.
									각 Controller에서 호출되는 메서드를 보유
board.dto		BoardDTO.java					~.jsp, ~Controller, DAO 간의 데이터 전달 역할


WebContent		index.jsp						초기 화면인 list.jsp로 바로 이동

									web.xml에
										<welcome-file-list>
											<welcome-file>초기 로딩 페이지</welcome-file>
										<welcome-file-list>
									같이 설정하면
									애플리케이션 명으로 요청이 들어 왔을 때 자동 호출.

			list.jsp						글 목록 및 검색 결과를 출력
										ListActionController 로 부터 전달된 ArrayList 객체를

										1.ArrayList 객체가 null 인지를 확인
										2. null이 아닌 경우 Iterator 객체 추출
										3. 전달된 각 데이터를 하나씩 추출
										4. 추출될 때마다 DTO 객체로 형변환하고,
										5. <table></table> 내에 한 줄씩 출력
			
										제목은 "retrivev.do?num=글번호" 형태로 글 번호를
									글 제목 중 하나를 선택하면 해당 글 번호를
									RetrieveActionController에게 전달

									글쓰기와 검색기능 보유

			writer.jsp						글쓰기 화면을 출력

									입력된 내용을 WriteActionController에게 전달

									글 저장과 글 목록으로 이동하는 기능 보유

			retrieve.jsp					글 상세보기 및 수정 화면을 출력
									수정된 내용을 UpdateActionController 에게 전달

									수정완료와 목록으로 이동기능 보유

META_INF		Context.xml					데이터베이스에 관련된 내용 기술.

WEB-INF				lib					작업에 필요한 라이브러리(~~.jar)들울 보유
				web.xml					전체를 조정하는 DIspatcherServlet과 요청 URL을 등록
									자동으로 로딩될 파일 리스트도 정의
				board-servlet.html				요청에 따라 수행할 컨트롤러들을 등록
									DB접속방법 및 각종 컨트롤러 설정
									각 컨트롤러의 결과에 따라 전달할 화면을 설장
sql				spring_simple_board.sql			테이블 생성 쿼리문


boad.command
import org.springframework.web.servlet.mvc.Controller; 를 구현받은 클래스

ㄴDeleteActionController
ㄴListActionController
ㄴRetrieveActionController
ㄴSearchActionController 
************************************************************************

****** ******************************************************************
import org.springframework.web.servlet.mvc.AbstractCommandController; 를 상속받은 클래스

ㄴUpdateActionController
ㄴWriteActionController
************************************************************************

****** **************
일반클래스
board.command
ㄴBoardCommand

board.dao
ㄴBoardDAO

board.dto
ㄴBoardDTO
********************

****** ****************************************
log4j.properties 는 첨부파일(압축풀기)
**********************************************


<!-- 컨트롤러역할을 하는 서블릿의 이름 및 요청경로를 지정 -->

<servlet>
	<servlet-name>board</servlet-name>
	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
</servlet>

<!-- 어떻게 요청이 들어왔을 때 , 처리할 것인가 -->

<servlet-mapping>
	<servlet-name>board</servlet-name>
	<url-pattern>*.do</url-pattern>
</servlet-mapping>


servlet-name와 url-pattern는 한쌍
url-pattern : 웹주소줄에서 요청사항이 들어오면 (가장 먼저 들어옴)
<servlet-name>board</servlet-name>
	<url-pattern>*.do</url-pattern>
*.do에 관한 serlvet named인 board가

servlet name, servlet class 순으로 진행됨


commons-dbcp.jar    : context 쪽
commons-logging.jar : db쿼리 실행할때마다 디버깅
commons-pool.jar    : context 객체를 담아놨다 사용하는 용도
jstl.jar
log4j-1.2.17.jar  : propertise 
ojdbc6.jar : 오라클 드라이버
spring-webmvc.jar : 디스팩쳐 객체 스프링 기본 mvc 기본 클래스 갖고있음
spring.jar
standard.jar

추후 maven으로 계승

Spring library

관리 MAVEN (porm.xml) : 프레임 라이브러리를 안대고 원본 사용하는 방식 -> grade (by google)
------------------------
